namespace Initialization 
module Initialization =
    open Chip8

    let private fontset = [ 
      0xF0; 0x90; 0x90; 0x90; 0xF0; // 0
      0x20; 0x60; 0x20; 0x20; 0x70; // 1
      0xF0; 0x10; 0xF0; 0x80; 0xF0; // 2
      0xF0; 0x10; 0xF0; 0x10; 0xF0; // 3
      0x90; 0x90; 0xF0; 0x10; 0x10; // 4
      0xF0; 0x80; 0xF0; 0x10; 0xF0; // 5
      0xF0; 0x80; 0xF0; 0x90; 0xF0; // 6
      0xF0; 0x10; 0x20; 0x40; 0x40; // 7
      0xF0; 0x90; 0xF0; 0x90; 0xF0; // 8
      0xF0; 0x90; 0xF0; 0x10; 0xF0; // 9
      0xF0; 0x90; 0xF0; 0x90; 0x90; // A
      0xE0; 0x90; 0xE0; 0x90; 0xE0; // B
      0xF0; 0x80; 0x80; 0x80; 0xF0; // C
      0xE0; 0x90; 0x90; 0x90; 0xE0; // D
      0xF0; 0x80; 0xF0; 0x80; 0xF0; // E
      0xF0; 0x80; 0xF0; 0x80; 0x80  // F
                          ] |> Seq.map uint8 |> Seq.toArray

    let Initialize (programBytes : byte[])=
        let systemMemory = Array.create 4096 0uy
        for i = 0 to 79 do
            systemMemory.[i + 80] <- fontset.[i]
        for i = 0 to (programBytes.Length - 1) do
            systemMemory.[i + 512] <- programBytes.[i]

        {
            Memory = systemMemory
            V = (Array.create 16 0uy);
            pc = 0x200us;
            I = 0us;
            gfx = (Array.create 2048 false);
            delayTimer = 0uy;
            soundTimer = 0uy;
            stack = (Array.create 16 0us);
            sp = 0us;
            terminating = false, ""
        }

    let initialInput = NormalPlay (Array.create 16 0uy)

